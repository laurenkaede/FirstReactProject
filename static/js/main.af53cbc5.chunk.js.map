{"version":3,"sources":["bella.jpg","daisy.jpg","components/Header.js","components/Body.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","name","job","city","Body","id","animal","src","Bella","alt","Daisy","Footer","className","colour","sing","read","family","friends","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,uLCuB5BC,G,MArBA,SAAAC,GACb,OACE,6BACA,6BACE,gDACA,6BACA,4CACiBA,EAAMC,KADvB,cACwCD,EAAME,IAD9C,SACyDF,EAAMG,KAD/D,+LAIA,wOAIA,8V,gCCCSC,EAbF,SAACJ,GACV,OACI,6BAEE,wBAAIK,GAAG,QAAP,cAA0BL,EAAMM,OAAhC,kDAEA,yBAAKC,IAAKC,IAAOC,IAAI,UACrB,yBAAKF,IAAKG,IAAOD,IAAI,YCGhBE,EAZA,SAACX,GACd,OACE,6BACE,mDACA,uBAAGY,UAAU,UAAb,0BAA8CZ,EAAMa,OAApD,KACA,uBAAGD,UAAU,UAAb,WAA+BZ,EAAMc,KAArC,KAA6Cd,EAAMe,KAAnD,8BAAoFf,EAAMgB,OAA1F,QAAuGhB,EAAMiB,QAA7G,KACA,uBAAGL,UAAU,UAAb,gFACA,uBAAGA,UAAU,UAAb,iFCmBSM,E,uKApBX,OACE,6BACE,gCACE,kBAAC,EAAD,CAAQjB,KAAK,SAASC,IAAI,qBAAqBC,KAAK,gBAGtD,8BACE,kBAAC,EAAD,CAAMG,OAAO,UAGf,6BAEA,gCACE,kBAAC,EAAD,CAAQO,OAAO,SAASC,KAAK,UAAUC,KAAK,UAAUC,OAAO,SAASC,QAAQ,kB,GAftEE,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af53cbc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bella.91f0324e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/daisy.741b723a.jpg\";","import React from \"react\";\n\nconst Header = props => {\n  return (\n    <div>\n    <br />\n      <h2>Lauren's Website</h2>\n      <br />\n      <p>\n        Hi my name is {props.name} and I'm a {props.job} from {props.city}. Prior to starting my journey in coding I was working towards a career in Medicine. Everything then changed when I became really interested in how technology impacts the lives of others.\n      </p>\n\n      <p>\n        Technological innovation is something I’m really passionate about and in today’s digital world a lot of businesses are finding success online. This of course creates a lot of opportunities...\n      </p>\n\n      <p>\n        This led me to build my own Shopify store and my own website in wordpress. Ultimately, I felt that the templates provided were restrictive, and that's what led me to take a 3 week coding course with Code Nation, to which I progressed onto the 3 month Software Development Master Course after gaining an apprentiship.\n      </p>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport Bella from \"../bella.jpg\";\nimport Daisy from \"../daisy.jpg\";\n\nconst Body = (props) => {\n    return (\n        <div>\n\n          <h3 id=\"cats\">I have two {props.animal}, one called Bella and the other called Daisy.</h3>\n\n          <img src={Bella} alt=\"Bella\" /> \n          <img src={Daisy} alt=\"Daisy\" />\n\n        </div>\n    );\n};\n\nexport default Body;\n","import React from \"react\";\n\nconst Footer = (props) => {\n  return (\n    <div>\n      <h3>My Favourite Things</h3>\n      <p className=\"center\">My favourite colour is {props.colour}.</p>  \n      <p className=\"center\">I enjoy {props.sing}, {props.read} and spending time with my {props.family} and {props.friends}.</p>\n      <p className=\"center\">I'm a huge nerd... and love anything to do with science, Marvel and puzzles.</p>\n      <p className=\"center\">I have a huge passion for travelling and recently went to Venice and Dubai.</p>\n    </div>\n  );\n};\n\nexport default Footer;","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\nimport Footer from \"./components/Footer\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <header>\n          <Header name=\"Lauren\" job=\"Software Developer\" city=\"Manchester\"/>\n        </header>\n\n        <body>\n          <Body animal=\"cats\" />\n        </body>\n\n        <br />\n\n        <footer>\n          <Footer colour=\"purple\" sing=\"singing\" read=\"reading\" family=\"family\" friends=\"friends\"/>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}